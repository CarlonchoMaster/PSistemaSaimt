Imports Microsoft.Practices.EnterpriseLibrary.Data
Imports System.Data.Common
Imports System.Data
Imports Entidades
Public Class MovimientoSTDDAO
    'Public Shared Function guardar(ListaMovimientoSTD As List(Of EEMovimientoSTD)) As Boolean
    '    Try
    '        Dim db As Database = DatabaseFactory.CreateDatabase(EEConexiones.CN_BDSaimt_General)
    '        For Each aoMovimientoSTD As EEMovimientoSTD In ListaMovimientoSTD
    '            Dim cmd As DbCommand = db.GetStoredProcCommand("Insertar_MovimientoSTD_pa")
    '            db.AddInParameter(cmd, "movde", DbType.String, aoMovimientoSTD.MovDe)
    '            db.AddInParameter(cmd, "movPerIdDe", DbType.String, aoMovimientoSTD.MovPerIdDe)
    '            db.AddInParameter(cmd, "movPerIdPara", DbType.String, aoMovimientoSTD.MovPerIdPara)
    '            db.AddInParameter(cmd, "movpara", DbType.String, aoMovimientoSTD.MovPara)
    '            db.AddInParameter(cmd, "movcomentario", DbType.String, aoMovimientoSTD.MovComentario)
    '            db.AddInParameter(cmd, "docid", DbType.String, aoMovimientoSTD.DocId)
    '            db.AddInParameter(cmd, "tgEstadoMovId", DbType.String, aoMovimientoSTD.TgEstadoMovId)
    '            db.AddInParameter(cmd, "tgTDestinoId", DbType.String, aoMovimientoSTD.tgTDestinoId)
    '            db.ExecuteNonQuery(cmd)
    '        Next
    '    Catch ex As Exception
    '        Throw New Exception("Guardar MovimientoSTD => " + ex.Message, ex)
    '    End Try
    '    Return True
    'End Function

    Public Shared Function guardar(ByVal aoMovimientoSTD As EEMovimientoSTD) As Boolean
        Try
            Dim db As Database = DatabaseFactory.CreateDatabase(EEConexiones.CN_BDSaimt_General)
            Dim cmd As DbCommand = db.GetStoredProcCommand("Insertar_MovimientoSTD_pa")
            db.AddInParameter(cmd, "movde", DbType.String, aoMovimientoSTD.MovDe)
            db.AddInParameter(cmd, "movPerIdDe", DbType.String, aoMovimientoSTD.MovPerIdDe)
            db.AddInParameter(cmd, "movPerIdPara", DbType.String, aoMovimientoSTD.MovPerIdPara)
            db.AddInParameter(cmd, "movpara", DbType.String, aoMovimientoSTD.MovPara)
            db.AddInParameter(cmd, "movcomentario", DbType.String, aoMovimientoSTD.MovComentario)
            db.AddInParameter(cmd, "docid", DbType.String, aoMovimientoSTD.DocId)
            db.AddInParameter(cmd, "tgEstadoMovId", DbType.String, aoMovimientoSTD.TgEstadoMovId)
            db.AddInParameter(cmd, "tgTDestinoId", DbType.String, aoMovimientoSTD.tgTDestinoId)
            db.AddInParameter(cmd, "movArchName", DbType.String, aoMovimientoSTD.MovArchName)
            db.AddInParameter(cmd, "movArch", DbType.Binary, aoMovimientoSTD.MovArch)
            db.AddInParameter(cmd, "movNroDocInt", DbType.String, aoMovimientoSTD.MovNroDocInt)
            db.AddInParameter(cmd, "movTgTDocId", DbType.String, aoMovimientoSTD.movTgTDocId)
            db.ExecuteNonQuery(cmd)
        Catch ex As Exception
            Throw New Exception("Guardar MovimientoSTD => " + ex.Message, ex)
        End Try
        Return True
    End Function

    Public Shared Function ActualizarLectura(MovId As String) As Boolean
        Try
            Dim db As Database = DatabaseFactory.CreateDatabase(EEConexiones.CN_BDSaimt_General)
            Dim cmd As DbCommand = db.GetStoredProcCommand("Actualizar_MovimientoSTD_Lectura_pa")
            db.AddInParameter(cmd, "movid", DbType.String, MovId)
            db.ExecuteNonQuery(cmd)
        Catch ex As Exception
            Throw New Exception("Actualizar MovimientoSTD Lectura => " & ex.Message, ex)
        End Try
        Return True
    End Function

    Public Shared Function ActualizarEstadoMov(MovId As String, EstadoMovId As Integer, Comentario As String, cargo As String, docId As String, Optional autoenvio As Boolean = False) As Boolean
        Try
            Dim db As Database = DatabaseFactory.CreateDatabase(EEConexiones.CN_BDSaimt_General)
            Dim cmd As DbCommand = db.GetStoredProcCommand("Actualizar_MovimientoSTD_tgEstadoMovId_movId_pa")
            db.AddInParameter(cmd, "movid", DbType.String, MovId)
            db.AddInParameter(cmd, "movComentario", DbType.String, " --> Comentario Final " & cargo & ": " & Comentario)
            db.AddInParameter(cmd, "tgEstadoMovId", DbType.Int32, EstadoMovId)
            db.AddInParameter(cmd, "docid", DbType.String, docId)
            db.AddInParameter(cmd, "autoenvio", DbType.Boolean, autoenvio)
            db.ExecuteNonQuery(cmd)
        Catch ex As Exception
            Throw New Exception("Actualizar MovimientoSTD  Estado MovId => " & ex.Message, ex)
        End Try
        Return True
    End Function

    Public Shared Function EliminarXMovId(ByVal MovId As Integer) As Boolean
        Try
            Dim db As Database = DatabaseFactory.CreateDatabase(EEConexiones.CN_BDSaimt_General)
            Dim cmd As DbCommand = db.GetStoredProcCommand("Eliminar_MovimientoSTD_XmovId_pa")
            db.AddInParameter(cmd, "movid", DbType.String, MovId)
            db.ExecuteNonQuery(cmd)
        Catch ex As Exception
            Throw New Exception("Eliminar MovimientoSTD X MovId => " & ex.Message, ex)
        End Try
        Return True
    End Function
End Class